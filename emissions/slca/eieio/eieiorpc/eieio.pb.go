// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eieio.proto

package eieiorpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pollutant int32

const (
	Pollutant_PNH4        Pollutant = 0
	Pollutant_PNO3        Pollutant = 1
	Pollutant_PSO4        Pollutant = 2
	Pollutant_SOA         Pollutant = 3
	Pollutant_PrimaryPM25 Pollutant = 4
	Pollutant_TotalPM25   Pollutant = 5
)

var Pollutant_name = map[int32]string{
	0: "PNH4",
	1: "PNO3",
	2: "PSO4",
	3: "SOA",
	4: "PrimaryPM25",
	5: "TotalPM25",
}

var Pollutant_value = map[string]int32{
	"PNH4":        0,
	"PNO3":        1,
	"PSO4":        2,
	"SOA":         3,
	"PrimaryPM25": 4,
	"TotalPM25":   5,
}

func (x Pollutant) String() string {
	return proto.EnumName(Pollutant_name, int32(x))
}

func (Pollutant) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{0}
}

type Emission int32

const (
	Emission_PM25 Emission = 0
	Emission_NH3  Emission = 1
	Emission_NOx  Emission = 2
	Emission_SOx  Emission = 3
	Emission_VOC  Emission = 4
)

var Emission_name = map[int32]string{
	0: "PM25",
	1: "NH3",
	2: "NOx",
	3: "SOx",
	4: "VOC",
}

var Emission_value = map[string]int32{
	"PM25": 0,
	"NH3":  1,
	"NOx":  2,
	"SOx":  3,
	"VOC":  4,
}

func (x Emission) String() string {
	return proto.EnumName(Emission_name, int32(x))
}

func (Emission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{1}
}

type Location int32

const (
	Location_Domestic Location = 0
	Location_Imported Location = 1
	Location_Total    Location = 2
)

var Location_name = map[int32]string{
	0: "Domestic",
	1: "Imported",
	2: "Total",
}

var Location_value = map[string]int32{
	"Domestic": 0,
	"Imported": 1,
	"Total":    2,
}

func (x Location) String() string {
	return proto.EnumName(Location_name, int32(x))
}

func (Location) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{2}
}

type FinalDemandType int32

const (
	// This group of demand types is directly available in the spreadsheet.
	FinalDemandType_PersonalConsumption   FinalDemandType = 0
	FinalDemandType_PrivateStructures     FinalDemandType = 1
	FinalDemandType_PrivateEquipment      FinalDemandType = 2
	FinalDemandType_PrivateIP             FinalDemandType = 3
	FinalDemandType_PrivateResidential    FinalDemandType = 4
	FinalDemandType_InventoryChange       FinalDemandType = 5
	FinalDemandType_Export                FinalDemandType = 6
	FinalDemandType_DefenseConsumption    FinalDemandType = 7
	FinalDemandType_DefenseStructures     FinalDemandType = 8
	FinalDemandType_DefenseEquipment      FinalDemandType = 9
	FinalDemandType_DefenseIP             FinalDemandType = 10
	FinalDemandType_NondefenseConsumption FinalDemandType = 11
	FinalDemandType_NondefenseStructures  FinalDemandType = 12
	FinalDemandType_NondefenseEquipment   FinalDemandType = 13
	FinalDemandType_NondefenseIP          FinalDemandType = 14
	FinalDemandType_LocalConsumption      FinalDemandType = 15
	FinalDemandType_LocalStructures       FinalDemandType = 16
	FinalDemandType_LocalEquipment        FinalDemandType = 17
	FinalDemandType_LocalIP               FinalDemandType = 18
	// This group of demand types consists of aggregates of the
	// above types.
	FinalDemandType_AllDemand FinalDemandType = 19
	FinalDemandType_NonExport FinalDemandType = 20
)

var FinalDemandType_name = map[int32]string{
	0:  "PersonalConsumption",
	1:  "PrivateStructures",
	2:  "PrivateEquipment",
	3:  "PrivateIP",
	4:  "PrivateResidential",
	5:  "InventoryChange",
	6:  "Export",
	7:  "DefenseConsumption",
	8:  "DefenseStructures",
	9:  "DefenseEquipment",
	10: "DefenseIP",
	11: "NondefenseConsumption",
	12: "NondefenseStructures",
	13: "NondefenseEquipment",
	14: "NondefenseIP",
	15: "LocalConsumption",
	16: "LocalStructures",
	17: "LocalEquipment",
	18: "LocalIP",
	19: "AllDemand",
	20: "NonExport",
}

var FinalDemandType_value = map[string]int32{
	"PersonalConsumption":   0,
	"PrivateStructures":     1,
	"PrivateEquipment":      2,
	"PrivateIP":             3,
	"PrivateResidential":    4,
	"InventoryChange":       5,
	"Export":                6,
	"DefenseConsumption":    7,
	"DefenseStructures":     8,
	"DefenseEquipment":      9,
	"DefenseIP":             10,
	"NondefenseConsumption": 11,
	"NondefenseStructures":  12,
	"NondefenseEquipment":   13,
	"NondefenseIP":          14,
	"LocalConsumption":      15,
	"LocalStructures":       16,
	"LocalEquipment":        17,
	"LocalIP":               18,
	"AllDemand":             19,
	"NonExport":             20,
}

func (x FinalDemandType) String() string {
	return proto.EnumName(FinalDemandType_name, int32(x))
}

func (FinalDemandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{3}
}

// These are the included demographic groups.
type Demograph int32

const (
	Demograph_Black      Demograph = 0
	Demograph_Hispanic   Demograph = 1
	Demograph_WhiteOther Demograph = 2
	Demograph_All        Demograph = 3
)

var Demograph_name = map[int32]string{
	0: "Black",
	1: "Hispanic",
	2: "WhiteOther",
	3: "All",
}

var Demograph_value = map[string]int32{
	"Black":      0,
	"Hispanic":   1,
	"WhiteOther": 2,
	"All":        3,
}

func (x Demograph) String() string {
	return proto.EnumName(Demograph_name, int32(x))
}

func (Demograph) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{4}
}

type StringInput struct {
	String_              string   `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringInput) Reset()         { *m = StringInput{} }
func (m *StringInput) String() string { return proto.CompactTextString(m) }
func (*StringInput) ProtoMessage()    {}
func (*StringInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{0}
}

func (m *StringInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringInput.Unmarshal(m, b)
}
func (m *StringInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringInput.Marshal(b, m, deterministic)
}
func (m *StringInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringInput.Merge(m, src)
}
func (m *StringInput) XXX_Size() int {
	return xxx_messageInfo_StringInput.Size(m)
}
func (m *StringInput) XXX_DiscardUnknown() {
	xxx_messageInfo_StringInput.DiscardUnknown(m)
}

var xxx_messageInfo_StringInput proto.InternalMessageInfo

func (m *StringInput) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

type StringList struct {
	List                 []string `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringList) Reset()         { *m = StringList{} }
func (m *StringList) String() string { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()    {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{1}
}

func (m *StringList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringList.Unmarshal(m, b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return xxx_messageInfo_StringList.Size(m)
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

func (m *StringList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type Selectors struct {
	Codes                []string  `protobuf:"bytes,1,rep,name=Codes,proto3" json:"Codes,omitempty"`
	Names                []string  `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	Values               []float32 `protobuf:"fixed32,3,rep,packed,name=Values,proto3" json:"Values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Selectors) Reset()         { *m = Selectors{} }
func (m *Selectors) String() string { return proto.CompactTextString(m) }
func (*Selectors) ProtoMessage()    {}
func (*Selectors) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{2}
}

func (m *Selectors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selectors.Unmarshal(m, b)
}
func (m *Selectors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selectors.Marshal(b, m, deterministic)
}
func (m *Selectors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selectors.Merge(m, src)
}
func (m *Selectors) XXX_Size() int {
	return xxx_messageInfo_Selectors.Size(m)
}
func (m *Selectors) XXX_DiscardUnknown() {
	xxx_messageInfo_Selectors.DiscardUnknown(m)
}

var xxx_messageInfo_Selectors proto.InternalMessageInfo

func (m *Selectors) GetCodes() []string {
	if m != nil {
		return m.Codes
	}
	return nil
}

func (m *Selectors) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Selectors) GetValues() []float32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Selection struct {
	EndUseGroup     string          `protobuf:"bytes,1,opt,name=EndUseGroup,proto3" json:"EndUseGroup,omitempty"`
	EndUseSector    string          `protobuf:"bytes,2,opt,name=EndUseSector,proto3" json:"EndUseSector,omitempty"`
	EmitterGroup    string          `protobuf:"bytes,3,opt,name=EmitterGroup,proto3" json:"EmitterGroup,omitempty"`
	EmitterSector   string          `protobuf:"bytes,4,opt,name=EmitterSector,proto3" json:"EmitterSector,omitempty"`
	ImpactType      string          `protobuf:"bytes,5,opt,name=ImpactType,proto3" json:"ImpactType,omitempty"`
	FinalDemandType FinalDemandType `protobuf:"varint,6,opt,name=FinalDemandType,proto3,enum=eieiorpc.FinalDemandType" json:"FinalDemandType,omitempty"`
	Year            int32           `protobuf:"varint,7,opt,name=Year,proto3" json:"Year,omitempty"`
	Population      string          `protobuf:"bytes,8,opt,name=Population,proto3" json:"Population,omitempty"`
	// Types that are valid to be assigned to Pol:
	//	*Selection_Pollutant
	//	*Selection_Emission
	Pol                  isSelection_Pol `protobuf_oneof:"Pol"`
	AQM                  string          `protobuf:"bytes,11,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Selection) Reset()         { *m = Selection{} }
func (m *Selection) String() string { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()    {}
func (*Selection) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{3}
}

func (m *Selection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selection.Unmarshal(m, b)
}
func (m *Selection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selection.Marshal(b, m, deterministic)
}
func (m *Selection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selection.Merge(m, src)
}
func (m *Selection) XXX_Size() int {
	return xxx_messageInfo_Selection.Size(m)
}
func (m *Selection) XXX_DiscardUnknown() {
	xxx_messageInfo_Selection.DiscardUnknown(m)
}

var xxx_messageInfo_Selection proto.InternalMessageInfo

func (m *Selection) GetEndUseGroup() string {
	if m != nil {
		return m.EndUseGroup
	}
	return ""
}

func (m *Selection) GetEndUseSector() string {
	if m != nil {
		return m.EndUseSector
	}
	return ""
}

func (m *Selection) GetEmitterGroup() string {
	if m != nil {
		return m.EmitterGroup
	}
	return ""
}

func (m *Selection) GetEmitterSector() string {
	if m != nil {
		return m.EmitterSector
	}
	return ""
}

func (m *Selection) GetImpactType() string {
	if m != nil {
		return m.ImpactType
	}
	return ""
}

func (m *Selection) GetFinalDemandType() FinalDemandType {
	if m != nil {
		return m.FinalDemandType
	}
	return FinalDemandType_PersonalConsumption
}

func (m *Selection) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Selection) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

type isSelection_Pol interface {
	isSelection_Pol()
}

type Selection_Pollutant struct {
	Pollutant Pollutant `protobuf:"varint,9,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant,oneof"`
}

type Selection_Emission struct {
	Emission Emission `protobuf:"varint,10,opt,name=Emission,proto3,enum=eieiorpc.Emission,oneof"`
}

func (*Selection_Pollutant) isSelection_Pol() {}

func (*Selection_Emission) isSelection_Pol() {}

func (m *Selection) GetPol() isSelection_Pol {
	if m != nil {
		return m.Pol
	}
	return nil
}

func (m *Selection) GetPollutant() Pollutant {
	if x, ok := m.GetPol().(*Selection_Pollutant); ok {
		return x.Pollutant
	}
	return Pollutant_PNH4
}

func (m *Selection) GetEmission() Emission {
	if x, ok := m.GetPol().(*Selection_Emission); ok {
		return x.Emission
	}
	return Emission_PM25
}

func (m *Selection) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Selection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Selection_Pollutant)(nil),
		(*Selection_Emission)(nil),
	}
}

type Year struct {
	Years                []int32  `protobuf:"varint,1,rep,packed,name=Years,proto3" json:"Years,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Year) Reset()         { *m = Year{} }
func (m *Year) String() string { return proto.CompactTextString(m) }
func (*Year) ProtoMessage()    {}
func (*Year) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{4}
}

func (m *Year) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Year.Unmarshal(m, b)
}
func (m *Year) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Year.Marshal(b, m, deterministic)
}
func (m *Year) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Year.Merge(m, src)
}
func (m *Year) XXX_Size() int {
	return xxx_messageInfo_Year.Size(m)
}
func (m *Year) XXX_DiscardUnknown() {
	xxx_messageInfo_Year.DiscardUnknown(m)
}

var xxx_messageInfo_Year proto.InternalMessageInfo

func (m *Year) GetYears() []int32 {
	if m != nil {
		return m.Years
	}
	return nil
}

type Point struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{5}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rectangle struct {
	LL                   *Point   `protobuf:"bytes,1,opt,name=LL,proto3" json:"LL,omitempty"`
	LR                   *Point   `protobuf:"bytes,2,opt,name=LR,proto3" json:"LR,omitempty"`
	UR                   *Point   `protobuf:"bytes,3,opt,name=UR,proto3" json:"UR,omitempty"`
	UL                   *Point   `protobuf:"bytes,4,opt,name=UL,proto3" json:"UL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{6}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLL() *Point {
	if m != nil {
		return m.LL
	}
	return nil
}

func (m *Rectangle) GetLR() *Point {
	if m != nil {
		return m.LR
	}
	return nil
}

func (m *Rectangle) GetUR() *Point {
	if m != nil {
		return m.UR
	}
	return nil
}

func (m *Rectangle) GetUL() *Point {
	if m != nil {
		return m.UL
	}
	return nil
}

type Rectangles struct {
	Rectangles           []*Rectangle `protobuf:"bytes,1,rep,name=Rectangles,proto3" json:"Rectangles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Rectangles) Reset()         { *m = Rectangles{} }
func (m *Rectangles) String() string { return proto.CompactTextString(m) }
func (*Rectangles) ProtoMessage()    {}
func (*Rectangles) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{7}
}

func (m *Rectangles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangles.Unmarshal(m, b)
}
func (m *Rectangles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangles.Marshal(b, m, deterministic)
}
func (m *Rectangles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangles.Merge(m, src)
}
func (m *Rectangles) XXX_Size() int {
	return xxx_messageInfo_Rectangles.Size(m)
}
func (m *Rectangles) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangles.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangles proto.InternalMessageInfo

func (m *Rectangles) GetRectangles() []*Rectangle {
	if m != nil {
		return m.Rectangles
	}
	return nil
}

type GeometryInput struct {
	SpatialReference     string   `protobuf:"bytes,1,opt,name=SpatialReference,proto3" json:"SpatialReference,omitempty"`
	AQM                  string   `protobuf:"bytes,2,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeometryInput) Reset()         { *m = GeometryInput{} }
func (m *GeometryInput) String() string { return proto.CompactTextString(m) }
func (*GeometryInput) ProtoMessage()    {}
func (*GeometryInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{8}
}

func (m *GeometryInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeometryInput.Unmarshal(m, b)
}
func (m *GeometryInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeometryInput.Marshal(b, m, deterministic)
}
func (m *GeometryInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeometryInput.Merge(m, src)
}
func (m *GeometryInput) XXX_Size() int {
	return xxx_messageInfo_GeometryInput.Size(m)
}
func (m *GeometryInput) XXX_DiscardUnknown() {
	xxx_messageInfo_GeometryInput.DiscardUnknown(m)
}

var xxx_messageInfo_GeometryInput proto.InternalMessageInfo

func (m *GeometryInput) GetSpatialReference() string {
	if m != nil {
		return m.SpatialReference
	}
	return ""
}

func (m *GeometryInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type ColorInfo struct {
	RGB                  [][]byte `protobuf:"bytes,1,rep,name=RGB,proto3" json:"RGB,omitempty"`
	Legend               string   `protobuf:"bytes,2,opt,name=Legend,proto3" json:"Legend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColorInfo) Reset()         { *m = ColorInfo{} }
func (m *ColorInfo) String() string { return proto.CompactTextString(m) }
func (*ColorInfo) ProtoMessage()    {}
func (*ColorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{9}
}

func (m *ColorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorInfo.Unmarshal(m, b)
}
func (m *ColorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorInfo.Marshal(b, m, deterministic)
}
func (m *ColorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorInfo.Merge(m, src)
}
func (m *ColorInfo) XXX_Size() int {
	return xxx_messageInfo_ColorInfo.Size(m)
}
func (m *ColorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColorInfo proto.InternalMessageInfo

func (m *ColorInfo) GetRGB() [][]byte {
	if m != nil {
		return m.RGB
	}
	return nil
}

func (m *ColorInfo) GetLegend() string {
	if m != nil {
		return m.Legend
	}
	return ""
}

type FinalDemandInput struct {
	FinalDemandType      FinalDemandType `protobuf:"varint,1,opt,name=FinalDemandType,proto3,enum=eieiorpc.FinalDemandType" json:"FinalDemandType,omitempty"`
	EndUseMask           *Mask           `protobuf:"bytes,2,opt,name=EndUseMask,proto3" json:"EndUseMask,omitempty"`
	Year                 int32           `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location        `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FinalDemandInput) Reset()         { *m = FinalDemandInput{} }
func (m *FinalDemandInput) String() string { return proto.CompactTextString(m) }
func (*FinalDemandInput) ProtoMessage()    {}
func (*FinalDemandInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{10}
}

func (m *FinalDemandInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalDemandInput.Unmarshal(m, b)
}
func (m *FinalDemandInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalDemandInput.Marshal(b, m, deterministic)
}
func (m *FinalDemandInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalDemandInput.Merge(m, src)
}
func (m *FinalDemandInput) XXX_Size() int {
	return xxx_messageInfo_FinalDemandInput.Size(m)
}
func (m *FinalDemandInput) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalDemandInput.DiscardUnknown(m)
}

var xxx_messageInfo_FinalDemandInput proto.InternalMessageInfo

func (m *FinalDemandInput) GetFinalDemandType() FinalDemandType {
	if m != nil {
		return m.FinalDemandType
	}
	return FinalDemandType_PersonalConsumption
}

func (m *FinalDemandInput) GetEndUseMask() *Mask {
	if m != nil {
		return m.EndUseMask
	}
	return nil
}

func (m *FinalDemandInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *FinalDemandInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

type DemographicConsumptionInput struct {
	Demograph            Demograph `protobuf:"varint,1,opt,name=Demograph,proto3,enum=eieiorpc.Demograph" json:"Demograph,omitempty"`
	EndUseMask           *Mask     `protobuf:"bytes,2,opt,name=EndUseMask,proto3" json:"EndUseMask,omitempty"`
	Year                 int32     `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DemographicConsumptionInput) Reset()         { *m = DemographicConsumptionInput{} }
func (m *DemographicConsumptionInput) String() string { return proto.CompactTextString(m) }
func (*DemographicConsumptionInput) ProtoMessage()    {}
func (*DemographicConsumptionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{11}
}

func (m *DemographicConsumptionInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DemographicConsumptionInput.Unmarshal(m, b)
}
func (m *DemographicConsumptionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DemographicConsumptionInput.Marshal(b, m, deterministic)
}
func (m *DemographicConsumptionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemographicConsumptionInput.Merge(m, src)
}
func (m *DemographicConsumptionInput) XXX_Size() int {
	return xxx_messageInfo_DemographicConsumptionInput.Size(m)
}
func (m *DemographicConsumptionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_DemographicConsumptionInput.DiscardUnknown(m)
}

var xxx_messageInfo_DemographicConsumptionInput proto.InternalMessageInfo

func (m *DemographicConsumptionInput) GetDemograph() Demograph {
	if m != nil {
		return m.Demograph
	}
	return Demograph_Black
}

func (m *DemographicConsumptionInput) GetEndUseMask() *Mask {
	if m != nil {
		return m.EndUseMask
	}
	return nil
}

func (m *DemographicConsumptionInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

type ConcentrationMatrixInput struct {
	Demand               *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Year                 int32     `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location  `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM                  string    `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConcentrationMatrixInput) Reset()         { *m = ConcentrationMatrixInput{} }
func (m *ConcentrationMatrixInput) String() string { return proto.CompactTextString(m) }
func (*ConcentrationMatrixInput) ProtoMessage()    {}
func (*ConcentrationMatrixInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{12}
}

func (m *ConcentrationMatrixInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcentrationMatrixInput.Unmarshal(m, b)
}
func (m *ConcentrationMatrixInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcentrationMatrixInput.Marshal(b, m, deterministic)
}
func (m *ConcentrationMatrixInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcentrationMatrixInput.Merge(m, src)
}
func (m *ConcentrationMatrixInput) XXX_Size() int {
	return xxx_messageInfo_ConcentrationMatrixInput.Size(m)
}
func (m *ConcentrationMatrixInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcentrationMatrixInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConcentrationMatrixInput proto.InternalMessageInfo

func (m *ConcentrationMatrixInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *ConcentrationMatrixInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *ConcentrationMatrixInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ConcentrationMatrixInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *ConcentrationMatrixInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type ConcentrationInput struct {
	Demand               *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emitters             *Mask     `protobuf:"bytes,2,opt,name=Emitters,proto3" json:"Emitters,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,3,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Year                 int32     `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location  `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM                  string    `protobuf:"bytes,6,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConcentrationInput) Reset()         { *m = ConcentrationInput{} }
func (m *ConcentrationInput) String() string { return proto.CompactTextString(m) }
func (*ConcentrationInput) ProtoMessage()    {}
func (*ConcentrationInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{13}
}

func (m *ConcentrationInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcentrationInput.Unmarshal(m, b)
}
func (m *ConcentrationInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcentrationInput.Marshal(b, m, deterministic)
}
func (m *ConcentrationInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcentrationInput.Merge(m, src)
}
func (m *ConcentrationInput) XXX_Size() int {
	return xxx_messageInfo_ConcentrationInput.Size(m)
}
func (m *ConcentrationInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcentrationInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConcentrationInput proto.InternalMessageInfo

func (m *ConcentrationInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *ConcentrationInput) GetEmitters() *Mask {
	if m != nil {
		return m.Emitters
	}
	return nil
}

func (m *ConcentrationInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *ConcentrationInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ConcentrationInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *ConcentrationInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type EmissionsMatrixInput struct {
	Demand               *Vector  `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emission             Emission `protobuf:"varint,2,opt,name=Emission,proto3,enum=eieiorpc.Emission" json:"Emission,omitempty"`
	Year                 int32    `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location `protobuf:"varint,4,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM                  string   `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmissionsMatrixInput) Reset()         { *m = EmissionsMatrixInput{} }
func (m *EmissionsMatrixInput) String() string { return proto.CompactTextString(m) }
func (*EmissionsMatrixInput) ProtoMessage()    {}
func (*EmissionsMatrixInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{14}
}

func (m *EmissionsMatrixInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmissionsMatrixInput.Unmarshal(m, b)
}
func (m *EmissionsMatrixInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmissionsMatrixInput.Marshal(b, m, deterministic)
}
func (m *EmissionsMatrixInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmissionsMatrixInput.Merge(m, src)
}
func (m *EmissionsMatrixInput) XXX_Size() int {
	return xxx_messageInfo_EmissionsMatrixInput.Size(m)
}
func (m *EmissionsMatrixInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EmissionsMatrixInput.DiscardUnknown(m)
}

var xxx_messageInfo_EmissionsMatrixInput proto.InternalMessageInfo

func (m *EmissionsMatrixInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *EmissionsMatrixInput) GetEmission() Emission {
	if m != nil {
		return m.Emission
	}
	return Emission_PM25
}

func (m *EmissionsMatrixInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EmissionsMatrixInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *EmissionsMatrixInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type EmissionsInput struct {
	Demand               *Vector  `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Emitters             *Mask    `protobuf:"bytes,2,opt,name=Emitters,proto3" json:"Emitters,omitempty"`
	Emission             Emission `protobuf:"varint,3,opt,name=Emission,proto3,enum=eieiorpc.Emission" json:"Emission,omitempty"`
	Year                 int32    `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	AQM                  string   `protobuf:"bytes,6,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmissionsInput) Reset()         { *m = EmissionsInput{} }
func (m *EmissionsInput) String() string { return proto.CompactTextString(m) }
func (*EmissionsInput) ProtoMessage()    {}
func (*EmissionsInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{15}
}

func (m *EmissionsInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmissionsInput.Unmarshal(m, b)
}
func (m *EmissionsInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmissionsInput.Marshal(b, m, deterministic)
}
func (m *EmissionsInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmissionsInput.Merge(m, src)
}
func (m *EmissionsInput) XXX_Size() int {
	return xxx_messageInfo_EmissionsInput.Size(m)
}
func (m *EmissionsInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EmissionsInput.DiscardUnknown(m)
}

var xxx_messageInfo_EmissionsInput proto.InternalMessageInfo

func (m *EmissionsInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *EmissionsInput) GetEmitters() *Mask {
	if m != nil {
		return m.Emitters
	}
	return nil
}

func (m *EmissionsInput) GetEmission() Emission {
	if m != nil {
		return m.Emission
	}
	return Emission_PM25
}

func (m *EmissionsInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EmissionsInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *EmissionsInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type HealthMatrixInput struct {
	Demand               *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population           string    `protobuf:"bytes,3,opt,name=Population,proto3" json:"Population,omitempty"`
	Year                 int32     `protobuf:"varint,4,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location  `protobuf:"varint,5,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	HR                   string    `protobuf:"bytes,6,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM                  string    `protobuf:"bytes,7,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HealthMatrixInput) Reset()         { *m = HealthMatrixInput{} }
func (m *HealthMatrixInput) String() string { return proto.CompactTextString(m) }
func (*HealthMatrixInput) ProtoMessage()    {}
func (*HealthMatrixInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{16}
}

func (m *HealthMatrixInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthMatrixInput.Unmarshal(m, b)
}
func (m *HealthMatrixInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthMatrixInput.Marshal(b, m, deterministic)
}
func (m *HealthMatrixInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthMatrixInput.Merge(m, src)
}
func (m *HealthMatrixInput) XXX_Size() int {
	return xxx_messageInfo_HealthMatrixInput.Size(m)
}
func (m *HealthMatrixInput) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthMatrixInput.DiscardUnknown(m)
}

var xxx_messageInfo_HealthMatrixInput proto.InternalMessageInfo

func (m *HealthMatrixInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *HealthMatrixInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *HealthMatrixInput) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

func (m *HealthMatrixInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *HealthMatrixInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *HealthMatrixInput) GetHR() string {
	if m != nil {
		return m.HR
	}
	return ""
}

func (m *HealthMatrixInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type HealthInput struct {
	Demand               *Vector   `protobuf:"bytes,1,opt,name=Demand,proto3" json:"Demand,omitempty"`
	EmitterMask          *Mask     `protobuf:"bytes,2,opt,name=EmitterMask,proto3" json:"EmitterMask,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,3,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population           string    `protobuf:"bytes,4,opt,name=Population,proto3" json:"Population,omitempty"`
	Year                 int32     `protobuf:"varint,5,opt,name=Year,proto3" json:"Year,omitempty"`
	Location             Location  `protobuf:"varint,6,opt,name=Location,proto3,enum=eieiorpc.Location" json:"Location,omitempty"`
	HR                   string    `protobuf:"bytes,7,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM                  string    `protobuf:"bytes,8,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HealthInput) Reset()         { *m = HealthInput{} }
func (m *HealthInput) String() string { return proto.CompactTextString(m) }
func (*HealthInput) ProtoMessage()    {}
func (*HealthInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{17}
}

func (m *HealthInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthInput.Unmarshal(m, b)
}
func (m *HealthInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthInput.Marshal(b, m, deterministic)
}
func (m *HealthInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthInput.Merge(m, src)
}
func (m *HealthInput) XXX_Size() int {
	return xxx_messageInfo_HealthInput.Size(m)
}
func (m *HealthInput) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthInput.DiscardUnknown(m)
}

var xxx_messageInfo_HealthInput proto.InternalMessageInfo

func (m *HealthInput) GetDemand() *Vector {
	if m != nil {
		return m.Demand
	}
	return nil
}

func (m *HealthInput) GetEmitterMask() *Mask {
	if m != nil {
		return m.EmitterMask
	}
	return nil
}

func (m *HealthInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *HealthInput) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

func (m *HealthInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *HealthInput) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location_Domestic
}

func (m *HealthInput) GetHR() string {
	if m != nil {
		return m.HR
	}
	return ""
}

func (m *HealthInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type Vector struct {
	Data                 []float64 `protobuf:"fixed64,1,rep,packed,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{18}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Mask struct {
	Data                 []float64 `protobuf:"fixed64,1,rep,packed,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Mask) Reset()         { *m = Mask{} }
func (m *Mask) String() string { return proto.CompactTextString(m) }
func (*Mask) ProtoMessage()    {}
func (*Mask) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{19}
}

func (m *Mask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mask.Unmarshal(m, b)
}
func (m *Mask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mask.Marshal(b, m, deterministic)
}
func (m *Mask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mask.Merge(m, src)
}
func (m *Mask) XXX_Size() int {
	return xxx_messageInfo_Mask.Size(m)
}
func (m *Mask) XXX_DiscardUnknown() {
	xxx_messageInfo_Mask.DiscardUnknown(m)
}

var xxx_messageInfo_Mask proto.InternalMessageInfo

func (m *Mask) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Matrix struct {
	Rows                 int32     `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
	Cols                 int32     `protobuf:"varint,2,opt,name=Cols,proto3" json:"Cols,omitempty"`
	Data                 []float64 `protobuf:"fixed64,3,rep,packed,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Matrix) Reset()         { *m = Matrix{} }
func (m *Matrix) String() string { return proto.CompactTextString(m) }
func (*Matrix) ProtoMessage()    {}
func (*Matrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{20}
}

func (m *Matrix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matrix.Unmarshal(m, b)
}
func (m *Matrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matrix.Marshal(b, m, deterministic)
}
func (m *Matrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matrix.Merge(m, src)
}
func (m *Matrix) XXX_Size() int {
	return xxx_messageInfo_Matrix.Size(m)
}
func (m *Matrix) XXX_DiscardUnknown() {
	xxx_messageInfo_Matrix.DiscardUnknown(m)
}

var xxx_messageInfo_Matrix proto.InternalMessageInfo

func (m *Matrix) GetRows() int32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *Matrix) GetCols() int32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *Matrix) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type EvaluationHealthInput struct {
	Year                 int32     `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	Population           string    `protobuf:"bytes,3,opt,name=Population,proto3" json:"Population,omitempty"`
	HR                   string    `protobuf:"bytes,4,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM                  string    `protobuf:"bytes,5,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EvaluationHealthInput) Reset()         { *m = EvaluationHealthInput{} }
func (m *EvaluationHealthInput) String() string { return proto.CompactTextString(m) }
func (*EvaluationHealthInput) ProtoMessage()    {}
func (*EvaluationHealthInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{21}
}

func (m *EvaluationHealthInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvaluationHealthInput.Unmarshal(m, b)
}
func (m *EvaluationHealthInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvaluationHealthInput.Marshal(b, m, deterministic)
}
func (m *EvaluationHealthInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationHealthInput.Merge(m, src)
}
func (m *EvaluationHealthInput) XXX_Size() int {
	return xxx_messageInfo_EvaluationHealthInput.Size(m)
}
func (m *EvaluationHealthInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationHealthInput.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationHealthInput proto.InternalMessageInfo

func (m *EvaluationHealthInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EvaluationHealthInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *EvaluationHealthInput) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

func (m *EvaluationHealthInput) GetHR() string {
	if m != nil {
		return m.HR
	}
	return ""
}

func (m *EvaluationHealthInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type EvaluationConcentrationsInput struct {
	Year                 int32     `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Pollutant            Pollutant `protobuf:"varint,2,opt,name=Pollutant,proto3,enum=eieiorpc.Pollutant" json:"Pollutant,omitempty"`
	AQM                  string    `protobuf:"bytes,3,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EvaluationConcentrationsInput) Reset()         { *m = EvaluationConcentrationsInput{} }
func (m *EvaluationConcentrationsInput) String() string { return proto.CompactTextString(m) }
func (*EvaluationConcentrationsInput) ProtoMessage()    {}
func (*EvaluationConcentrationsInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{22}
}

func (m *EvaluationConcentrationsInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvaluationConcentrationsInput.Unmarshal(m, b)
}
func (m *EvaluationConcentrationsInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvaluationConcentrationsInput.Marshal(b, m, deterministic)
}
func (m *EvaluationConcentrationsInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationConcentrationsInput.Merge(m, src)
}
func (m *EvaluationConcentrationsInput) XXX_Size() int {
	return xxx_messageInfo_EvaluationConcentrationsInput.Size(m)
}
func (m *EvaluationConcentrationsInput) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationConcentrationsInput.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationConcentrationsInput proto.InternalMessageInfo

func (m *EvaluationConcentrationsInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EvaluationConcentrationsInput) GetPollutant() Pollutant {
	if m != nil {
		return m.Pollutant
	}
	return Pollutant_PNH4
}

func (m *EvaluationConcentrationsInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type ConcentrationResponseAverageInput struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population           string   `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	HR                   string   `protobuf:"bytes,3,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM                  string   `protobuf:"bytes,4,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConcentrationResponseAverageInput) Reset()         { *m = ConcentrationResponseAverageInput{} }
func (m *ConcentrationResponseAverageInput) String() string { return proto.CompactTextString(m) }
func (*ConcentrationResponseAverageInput) ProtoMessage()    {}
func (*ConcentrationResponseAverageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{23}
}

func (m *ConcentrationResponseAverageInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcentrationResponseAverageInput.Unmarshal(m, b)
}
func (m *ConcentrationResponseAverageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcentrationResponseAverageInput.Marshal(b, m, deterministic)
}
func (m *ConcentrationResponseAverageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcentrationResponseAverageInput.Merge(m, src)
}
func (m *ConcentrationResponseAverageInput) XXX_Size() int {
	return xxx_messageInfo_ConcentrationResponseAverageInput.Size(m)
}
func (m *ConcentrationResponseAverageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcentrationResponseAverageInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConcentrationResponseAverageInput proto.InternalMessageInfo

func (m *ConcentrationResponseAverageInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ConcentrationResponseAverageInput) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

func (m *ConcentrationResponseAverageInput) GetHR() string {
	if m != nil {
		return m.HR
	}
	return ""
}

func (m *ConcentrationResponseAverageInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type PopulationIncidenceInput struct {
	Year                 int32    `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Population           string   `protobuf:"bytes,2,opt,name=Population,proto3" json:"Population,omitempty"`
	HR                   string   `protobuf:"bytes,3,opt,name=HR,proto3" json:"HR,omitempty"`
	AQM                  string   `protobuf:"bytes,4,opt,name=AQM,proto3" json:"AQM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopulationIncidenceInput) Reset()         { *m = PopulationIncidenceInput{} }
func (m *PopulationIncidenceInput) String() string { return proto.CompactTextString(m) }
func (*PopulationIncidenceInput) ProtoMessage()    {}
func (*PopulationIncidenceInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{24}
}

func (m *PopulationIncidenceInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopulationIncidenceInput.Unmarshal(m, b)
}
func (m *PopulationIncidenceInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopulationIncidenceInput.Marshal(b, m, deterministic)
}
func (m *PopulationIncidenceInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopulationIncidenceInput.Merge(m, src)
}
func (m *PopulationIncidenceInput) XXX_Size() int {
	return xxx_messageInfo_PopulationIncidenceInput.Size(m)
}
func (m *PopulationIncidenceInput) XXX_DiscardUnknown() {
	xxx_messageInfo_PopulationIncidenceInput.DiscardUnknown(m)
}

var xxx_messageInfo_PopulationIncidenceInput proto.InternalMessageInfo

func (m *PopulationIncidenceInput) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *PopulationIncidenceInput) GetPopulation() string {
	if m != nil {
		return m.Population
	}
	return ""
}

func (m *PopulationIncidenceInput) GetHR() string {
	if m != nil {
		return m.HR
	}
	return ""
}

func (m *PopulationIncidenceInput) GetAQM() string {
	if m != nil {
		return m.AQM
	}
	return ""
}

type PopulationIncidenceOutput struct {
	Population           []float64 `protobuf:"fixed64,1,rep,packed,name=Population,proto3" json:"Population,omitempty"`
	Incidence            []float64 `protobuf:"fixed64,2,rep,packed,name=Incidence,proto3" json:"Incidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PopulationIncidenceOutput) Reset()         { *m = PopulationIncidenceOutput{} }
func (m *PopulationIncidenceOutput) String() string { return proto.CompactTextString(m) }
func (*PopulationIncidenceOutput) ProtoMessage()    {}
func (*PopulationIncidenceOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_77c48421fa7c8840, []int{25}
}

func (m *PopulationIncidenceOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopulationIncidenceOutput.Unmarshal(m, b)
}
func (m *PopulationIncidenceOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopulationIncidenceOutput.Marshal(b, m, deterministic)
}
func (m *PopulationIncidenceOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopulationIncidenceOutput.Merge(m, src)
}
func (m *PopulationIncidenceOutput) XXX_Size() int {
	return xxx_messageInfo_PopulationIncidenceOutput.Size(m)
}
func (m *PopulationIncidenceOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PopulationIncidenceOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PopulationIncidenceOutput proto.InternalMessageInfo

func (m *PopulationIncidenceOutput) GetPopulation() []float64 {
	if m != nil {
		return m.Population
	}
	return nil
}

func (m *PopulationIncidenceOutput) GetIncidence() []float64 {
	if m != nil {
		return m.Incidence
	}
	return nil
}

func init() {
	proto.RegisterEnum("eieiorpc.Pollutant", Pollutant_name, Pollutant_value)
	proto.RegisterEnum("eieiorpc.Emission", Emission_name, Emission_value)
	proto.RegisterEnum("eieiorpc.Location", Location_name, Location_value)
	proto.RegisterEnum("eieiorpc.FinalDemandType", FinalDemandType_name, FinalDemandType_value)
	proto.RegisterEnum("eieiorpc.Demograph", Demograph_name, Demograph_value)
	proto.RegisterType((*StringInput)(nil), "eieiorpc.StringInput")
	proto.RegisterType((*StringList)(nil), "eieiorpc.StringList")
	proto.RegisterType((*Selectors)(nil), "eieiorpc.Selectors")
	proto.RegisterType((*Selection)(nil), "eieiorpc.Selection")
	proto.RegisterType((*Year)(nil), "eieiorpc.Year")
	proto.RegisterType((*Point)(nil), "eieiorpc.Point")
	proto.RegisterType((*Rectangle)(nil), "eieiorpc.Rectangle")
	proto.RegisterType((*Rectangles)(nil), "eieiorpc.Rectangles")
	proto.RegisterType((*GeometryInput)(nil), "eieiorpc.GeometryInput")
	proto.RegisterType((*ColorInfo)(nil), "eieiorpc.ColorInfo")
	proto.RegisterType((*FinalDemandInput)(nil), "eieiorpc.FinalDemandInput")
	proto.RegisterType((*DemographicConsumptionInput)(nil), "eieiorpc.DemographicConsumptionInput")
	proto.RegisterType((*ConcentrationMatrixInput)(nil), "eieiorpc.ConcentrationMatrixInput")
	proto.RegisterType((*ConcentrationInput)(nil), "eieiorpc.ConcentrationInput")
	proto.RegisterType((*EmissionsMatrixInput)(nil), "eieiorpc.EmissionsMatrixInput")
	proto.RegisterType((*EmissionsInput)(nil), "eieiorpc.EmissionsInput")
	proto.RegisterType((*HealthMatrixInput)(nil), "eieiorpc.HealthMatrixInput")
	proto.RegisterType((*HealthInput)(nil), "eieiorpc.HealthInput")
	proto.RegisterType((*Vector)(nil), "eieiorpc.Vector")
	proto.RegisterType((*Mask)(nil), "eieiorpc.Mask")
	proto.RegisterType((*Matrix)(nil), "eieiorpc.Matrix")
	proto.RegisterType((*EvaluationHealthInput)(nil), "eieiorpc.EvaluationHealthInput")
	proto.RegisterType((*EvaluationConcentrationsInput)(nil), "eieiorpc.EvaluationConcentrationsInput")
	proto.RegisterType((*ConcentrationResponseAverageInput)(nil), "eieiorpc.ConcentrationResponseAverageInput")
	proto.RegisterType((*PopulationIncidenceInput)(nil), "eieiorpc.PopulationIncidenceInput")
	proto.RegisterType((*PopulationIncidenceOutput)(nil), "eieiorpc.PopulationIncidenceOutput")
}

func init() { proto.RegisterFile("eieio.proto", fileDescriptor_77c48421fa7c8840) }

var fileDescriptor_77c48421fa7c8840 = []byte{
	// 1743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x19, 0x4d, 0x6f, 0x1b, 0x41,
	0xd5, 0xbb, 0x6b, 0x3b, 0xf6, 0x73, 0xe2, 0x4c, 0x26, 0x49, 0xeb, 0xa6, 0xa1, 0x0d, 0x5b, 0x2a,
	0xa2, 0x20, 0x45, 0x6d, 0xd2, 0x20, 0xa0, 0x2d, 0xc8, 0x71, 0x4c, 0x6c, 0xc9, 0x89, 0xcd, 0xb8,
	0x5f, 0x39, 0xc1, 0xd6, 0x9e, 0x26, 0xab, 0xae, 0x77, 0x96, 0xdd, 0x71, 0x48, 0x7e, 0x05, 0x17,
	0xae, 0x48, 0x88, 0xdf, 0xc0, 0x95, 0x2b, 0x17, 0xc4, 0x3f, 0xe1, 0x86, 0xc4, 0x19, 0xcd, 0xec,
	0x7a, 0x77, 0x6c, 0xaf, 0xdb, 0x38, 0x4a, 0x38, 0x79, 0xe6, 0xcd, 0xfb, 0x7e, 0x6f, 0xde, 0xbe,
	0x37, 0x86, 0x12, 0xb5, 0xa9, 0xcd, 0x76, 0x3d, 0x9f, 0x71, 0x86, 0x0b, 0x72, 0xe3, 0x7b, 0x3d,
	0xf3, 0x39, 0x94, 0xba, 0xdc, 0xb7, 0xdd, 0xf3, 0xa6, 0xeb, 0x0d, 0x39, 0x7e, 0x00, 0xf9, 0x70,
	0x5b, 0xd1, 0xb6, 0xb4, 0xed, 0x22, 0x89, 0x76, 0xe6, 0x16, 0x40, 0xb8, 0x6a, 0xd9, 0x01, 0xc7,
	0x18, 0xb2, 0xe2, 0xb7, 0xa2, 0x6d, 0x19, 0xdb, 0x45, 0x22, 0xd7, 0x66, 0x1b, 0x8a, 0x5d, 0xea,
	0xd0, 0x1e, 0x67, 0x7e, 0x80, 0xd7, 0x20, 0x57, 0x63, 0x7d, 0x1a, 0x44, 0x18, 0xe1, 0x46, 0x40,
	0x4f, 0xad, 0x01, 0x0d, 0x2a, 0x7a, 0x08, 0x95, 0x1b, 0x21, 0xf2, 0x83, 0xe5, 0x0c, 0x69, 0x50,
	0x31, 0xb6, 0x8c, 0x6d, 0x9d, 0x44, 0x3b, 0xf3, 0x6f, 0xc6, 0x88, 0xa3, 0xcd, 0x5c, 0xbc, 0x05,
	0xa5, 0xba, 0xdb, 0x7f, 0x1f, 0xd0, 0x63, 0x9f, 0x0d, 0xbd, 0x48, 0x3b, 0x15, 0x84, 0x4d, 0x58,
	0x0c, 0xb7, 0x5d, 0xa9, 0x44, 0x45, 0x97, 0x28, 0x63, 0x30, 0x89, 0x33, 0xb0, 0x39, 0xa7, 0x7e,
	0xc8, 0xc6, 0x88, 0x70, 0x14, 0x18, 0xfe, 0x11, 0x2c, 0x45, 0xfb, 0x88, 0x51, 0x56, 0x22, 0x8d,
	0x03, 0xf1, 0x13, 0x80, 0xe6, 0xc0, 0xb3, 0x7a, 0xfc, 0xdd, 0xb5, 0x47, 0x2b, 0x39, 0x89, 0xa2,
	0x40, 0x70, 0x0d, 0x96, 0x7f, 0x6d, 0xbb, 0x96, 0x73, 0x44, 0x07, 0x96, 0xdb, 0x97, 0x48, 0xf9,
	0x2d, 0x6d, 0xbb, 0xbc, 0xf7, 0x68, 0x77, 0xe4, 0xfb, 0xdd, 0x09, 0x04, 0x32, 0x49, 0x21, 0xfc,
	0x7c, 0x46, 0x2d, 0xbf, 0xb2, 0xb0, 0xa5, 0x6d, 0xe7, 0x88, 0x5c, 0x0b, 0xc1, 0x1d, 0xe6, 0x0d,
	0x1d, 0x4b, 0xb8, 0xa5, 0x52, 0x08, 0x05, 0x27, 0x10, 0xbc, 0x0f, 0xc5, 0x0e, 0x73, 0x9c, 0x21,
	0xb7, 0x5c, 0x5e, 0x29, 0x4a, 0x91, 0xab, 0x89, 0xc8, 0xf8, 0xa8, 0x91, 0x21, 0x09, 0x1e, 0x7e,
	0x01, 0x85, 0xfa, 0xc0, 0x0e, 0x02, 0xc1, 0x12, 0x24, 0x0d, 0x4e, 0x68, 0x46, 0x27, 0x8d, 0x0c,
	0x89, 0xb1, 0x30, 0x02, 0xa3, 0xfa, 0x9b, 0x93, 0x4a, 0x49, 0xca, 0x17, 0xcb, 0xc3, 0x1c, 0x18,
	0x1d, 0xe6, 0x98, 0x9b, 0xa1, 0xce, 0x22, 0xd8, 0xe2, 0x37, 0x4c, 0x81, 0x1c, 0x09, 0x37, 0xe6,
	0x33, 0xc8, 0x75, 0x98, 0xed, 0x72, 0xbc, 0x08, 0xda, 0x27, 0x19, 0x45, 0x9d, 0x68, 0x9f, 0xc4,
	0xee, 0x4c, 0x06, 0x4c, 0x27, 0xda, 0x99, 0xf9, 0x47, 0x0d, 0x8a, 0x84, 0xf6, 0xb8, 0xe5, 0x9e,
	0x3b, 0x14, 0x3f, 0x05, 0xbd, 0xd5, 0x92, 0xa8, 0xa5, 0xbd, 0x65, 0xd5, 0x12, 0xdb, 0xe5, 0x44,
	0x6f, 0xb5, 0x24, 0x02, 0x91, 0xd4, 0xa9, 0x08, 0x44, 0x20, 0xbc, 0x27, 0x32, 0xd6, 0x69, 0x08,
	0xef, 0x43, 0x84, 0x96, 0x8c, 0x73, 0x2a, 0x42, 0xcb, 0xac, 0x02, 0xc4, 0x0a, 0x05, 0x78, 0x5f,
	0xdd, 0x49, 0xfb, 0x4a, 0xaa, 0x8f, 0xe3, 0x33, 0xa2, 0xa0, 0x99, 0x27, 0xb0, 0x74, 0x4c, 0xd9,
	0x80, 0x72, 0xff, 0x3a, 0xbc, 0x6a, 0x3b, 0x80, 0xba, 0x9e, 0xc5, 0x6d, 0xcb, 0x21, 0xf4, 0x0b,
	0xf5, 0xa9, 0xdb, 0xa3, 0x51, 0x5a, 0x4f, 0xc1, 0x47, 0xde, 0xd6, 0x63, 0x6f, 0x9b, 0x07, 0x50,
	0xac, 0x31, 0x87, 0xf9, 0x4d, 0xf7, 0x0b, 0x13, 0xc7, 0xe4, 0xf8, 0x50, 0x6a, 0xb2, 0x48, 0xc4,
	0x52, 0x5c, 0xaa, 0x16, 0x3d, 0xa7, 0x6e, 0x3f, 0xa2, 0x89, 0x76, 0xe6, 0x3f, 0x35, 0x40, 0x4a,
	0x96, 0x85, 0x9a, 0xa4, 0xe4, 0xaa, 0x36, 0x77, 0xae, 0xee, 0x02, 0x84, 0x57, 0xed, 0xc4, 0x0a,
	0xbe, 0x46, 0xd1, 0x28, 0x27, 0xf4, 0x02, 0x4a, 0x14, 0x8c, 0x38, 0xb7, 0x0d, 0x25, 0xb7, 0x77,
	0xa1, 0xd0, 0x62, 0xbd, 0x30, 0xb3, 0xb3, 0x93, 0x69, 0x38, 0x3a, 0x21, 0x31, 0x8e, 0xf9, 0x27,
	0x0d, 0x1e, 0x1f, 0xd1, 0x01, 0x3b, 0xf7, 0x2d, 0xef, 0xc2, 0xee, 0xd5, 0x98, 0x1b, 0x0c, 0x07,
	0x9e, 0x38, 0x0a, 0x0d, 0x7b, 0x09, 0xc5, 0xf8, 0x38, 0x32, 0x49, 0x89, 0x53, 0x7c, 0x44, 0x12,
	0xac, 0xbb, 0x30, 0xc3, 0xfc, 0x97, 0x06, 0x95, 0x1a, 0x73, 0x7b, 0xd4, 0xe5, 0xbe, 0x54, 0xf4,
	0xc4, 0xe2, 0xbe, 0x7d, 0x15, 0xea, 0xb4, 0x0d, 0xf9, 0xd0, 0x6b, 0x51, 0x4a, 0xa3, 0x84, 0xf9,
	0x07, 0x59, 0x5a, 0x48, 0x74, 0x2e, 0xb4, 0x4f, 0x6e, 0xb2, 0x3e, 0xf3, 0x26, 0xab, 0xf7, 0xf8,
	0x0e, 0x9c, 0x3a, 0xca, 0xb5, 0x5c, 0x92, 0x6b, 0xff, 0xd1, 0x00, 0x8f, 0xd9, 0x33, 0xaf, 0x25,
	0x3b, 0xb2, 0xbc, 0x88, 0xea, 0x19, 0xcc, 0x70, 0x69, 0x7c, 0x3e, 0x6e, 0xb5, 0x31, 0x97, 0xd5,
	0xd9, 0x19, 0x56, 0xe7, 0x6e, 0x6e, 0x75, 0x3e, 0xb1, 0xfa, 0x1f, 0x1a, 0xac, 0x8d, 0xca, 0x5d,
	0x70, 0xbb, 0x08, 0xee, 0x2a, 0x65, 0x55, 0x9f, 0x55, 0x56, 0x95, 0xa2, 0x7a, 0x3f, 0xe1, 0xfb,
	0xb7, 0x06, 0xe5, 0xd8, 0x90, 0xfb, 0x0c, 0x9d, 0x6a, 0xae, 0x31, 0x87, 0xb9, 0x77, 0x1b, 0xb7,
	0xff, 0x6a, 0xb0, 0xd2, 0xa0, 0x96, 0xc3, 0x2f, 0xfe, 0x6f, 0xd7, 0x6e, 0xfc, 0x9b, 0x6c, 0x4c,
	0x7d, 0x93, 0xef, 0xc2, 0xd0, 0x32, 0xe8, 0x0d, 0x12, 0xd9, 0xa9, 0x37, 0xc8, 0xc8, 0xf0, 0x85,
	0xc4, 0xf0, 0xbf, 0xea, 0x50, 0x0a, 0x0d, 0x9f, 0xd7, 0xe4, 0x17, 0x50, 0x8a, 0x82, 0xf8, 0x8d,
	0xaa, 0xa7, 0xa2, 0xdc, 0xe6, 0x96, 0x8e, 0x3b, 0x29, 0x3b, 0xd3, 0x49, 0xb9, 0x19, 0x4e, 0xca,
	0xdf, 0xd8, 0x49, 0x0b, 0x93, 0x4e, 0x2a, 0x24, 0x4e, 0xda, 0x84, 0x7c, 0x68, 0xbc, 0x90, 0x77,
	0x64, 0x71, 0x4b, 0x7e, 0x35, 0x35, 0x22, 0xd7, 0xe6, 0x06, 0x64, 0x47, 0x55, 0x7d, 0xea, 0xec,
	0x08, 0xf2, 0x61, 0x42, 0x89, 0x53, 0xc2, 0xfe, 0x10, 0x48, 0xb7, 0xe6, 0x88, 0x5c, 0x0b, 0x58,
	0x8d, 0x39, 0xe1, 0x1d, 0xc9, 0x11, 0xb9, 0x8e, 0xb9, 0x18, 0x0a, 0x97, 0xbf, 0x68, 0xb0, 0x5e,
	0xbf, 0xb4, 0x9c, 0xa1, 0x54, 0x58, 0x0d, 0xd7, 0xc8, 0x7e, 0x4d, 0xb1, 0xff, 0x1e, 0x72, 0x31,
	0x74, 0x51, 0x76, 0xd2, 0x45, 0x4a, 0xbd, 0xb8, 0x82, 0x1f, 0x24, 0x1a, 0x8e, 0xd5, 0xfd, 0xe0,
	0x4e, 0x35, 0x8d, 0x24, 0x1b, 0x89, 0xe4, 0x6b, 0xf8, 0xe1, 0x98, 0x3c, 0x42, 0x03, 0x8f, 0xb9,
	0x01, 0xad, 0x5e, 0x52, 0xdf, 0x3a, 0xa7, 0xb3, 0xa5, 0x8f, 0x1b, 0xad, 0xcf, 0x30, 0xda, 0x98,
	0x34, 0x3a, 0x9b, 0x88, 0xf6, 0xa0, 0x92, 0xe0, 0x37, 0xdd, 0x9e, 0xdd, 0x17, 0x8d, 0xd7, 0x7d,
	0x4a, 0x3c, 0x83, 0x47, 0x29, 0x12, 0xdb, 0x43, 0x2e, 0x44, 0x8e, 0xb3, 0x0f, 0xd3, 0x50, 0x65,
	0xbf, 0x09, 0xc5, 0x98, 0x44, 0x8e, 0x53, 0x1a, 0x49, 0x00, 0x3b, 0x44, 0x09, 0x06, 0x2e, 0x40,
	0xb6, 0x73, 0xda, 0x78, 0x85, 0x32, 0xe1, 0xaa, 0xbd, 0x8f, 0x34, 0xb9, 0xea, 0xb6, 0x5f, 0x21,
	0x1d, 0x2f, 0x80, 0xd1, 0x6d, 0x57, 0x91, 0x81, 0x97, 0xa1, 0xd4, 0xf1, 0xed, 0x81, 0xe5, 0x5f,
	0x77, 0x4e, 0xf6, 0x0e, 0x50, 0x16, 0x2f, 0x41, 0xf1, 0x1d, 0xe3, 0x96, 0x23, 0xb7, 0xb9, 0x9d,
	0x9f, 0x25, 0xc5, 0x5d, 0x92, 0x0b, 0x68, 0x46, 0x90, 0x9f, 0x36, 0x04, 0x47, 0xb1, 0x68, 0x5f,
	0x8d, 0x18, 0x5e, 0x21, 0x43, 0x2c, 0x3e, 0xb4, 0x6b, 0x28, 0xbb, 0xf3, 0x32, 0xb9, 0xc4, 0x78,
	0x11, 0x0a, 0x47, 0x6c, 0x40, 0x03, 0x6e, 0xf7, 0x50, 0x46, 0xec, 0x9a, 0x03, 0x8f, 0xf9, 0x9c,
	0xf6, 0x91, 0x86, 0x8b, 0x90, 0x93, 0x02, 0x91, 0xbe, 0xf3, 0x77, 0x63, 0xaa, 0x25, 0xc5, 0x0f,
	0x61, 0xb5, 0x43, 0xfd, 0x80, 0xb9, 0x96, 0xa3, 0x34, 0x7a, 0x28, 0x83, 0xd7, 0x61, 0xa5, 0xe3,
	0xdb, 0x97, 0x16, 0xa7, 0x5d, 0xee, 0x0f, 0x7b, 0x7c, 0xe8, 0xd3, 0x00, 0x69, 0x78, 0x0d, 0x50,
	0x04, 0xae, 0xff, 0x7e, 0x68, 0x7b, 0x03, 0xea, 0x72, 0xa4, 0x0b, 0xab, 0x22, 0x68, 0xb3, 0x83,
	0x0c, 0xfc, 0x00, 0x70, 0xb4, 0x25, 0x34, 0x10, 0xde, 0x13, 0x7d, 0x37, 0xca, 0xe2, 0x55, 0x58,
	0x6e, 0xba, 0x97, 0xd4, 0xe5, 0xcc, 0xbf, 0xae, 0x5d, 0x58, 0xee, 0x39, 0x45, 0x39, 0x0c, 0x90,
	0xaf, 0x5f, 0x09, 0x75, 0x51, 0x5e, 0x10, 0x1e, 0xd1, 0x2f, 0xd4, 0x0d, 0xa8, 0xaa, 0xcc, 0x82,
	0x50, 0x26, 0x82, 0x2b, 0xca, 0x14, 0x84, 0x32, 0x11, 0x38, 0x51, 0xa6, 0x28, 0x94, 0x89, 0xa0,
	0xcd, 0x0e, 0x02, 0xfc, 0x08, 0xd6, 0x4f, 0x99, 0xdb, 0x9f, 0x66, 0x5b, 0xc2, 0x15, 0x58, 0x4b,
	0x8e, 0x14, 0xce, 0x8b, 0xc2, 0x2d, 0xc9, 0x49, 0xc2, 0x7c, 0x09, 0x23, 0x58, 0x4c, 0x0e, 0x9a,
	0x1d, 0x54, 0x16, 0x4a, 0x88, 0x40, 0x8c, 0xb9, 0x6f, 0x59, 0x98, 0x2a, 0xa1, 0x0a, 0x57, 0x84,
	0x31, 0x94, 0x25, 0x30, 0x61, 0xb8, 0x82, 0x4b, 0xb0, 0x20, 0x61, 0xcd, 0x0e, 0xc2, 0x42, 0xf5,
	0xaa, 0x13, 0x85, 0x07, 0xad, 0x8a, 0xed, 0x29, 0x73, 0x23, 0xef, 0xac, 0xed, 0xbc, 0x55, 0x1a,
	0x6f, 0x11, 0xd7, 0x43, 0xc7, 0xea, 0x7d, 0x0d, 0x03, 0xde, 0xb0, 0x03, 0xcf, 0x72, 0xed, 0x1e,
	0xd2, 0x70, 0x19, 0xe0, 0xe3, 0x85, 0xcd, 0x69, 0x9b, 0x5f, 0x50, 0x3f, 0x4c, 0x9d, 0xaa, 0xe3,
	0x20, 0x63, 0xef, 0xcf, 0xcb, 0x50, 0xa8, 0x37, 0xeb, 0xcd, 0xb6, 0xef, 0xf5, 0xf0, 0x2f, 0x46,
	0x73, 0xbd, 0x1c, 0xcf, 0x03, 0xac, 0x94, 0x95, 0xf8, 0x79, 0x60, 0x63, 0x0a, 0xc8, 0xfc, 0xc0,
	0xcc, 0xe0, 0xd7, 0xb0, 0xa4, 0xce, 0xff, 0xf3, 0x13, 0x2b, 0x0f, 0x03, 0xf3, 0x11, 0xbf, 0x91,
	0x3d, 0x57, 0xf2, 0x60, 0x30, 0x1f, 0xf5, 0x6e, 0x34, 0x3c, 0xa7, 0x13, 0x29, 0x5f, 0x66, 0x39,
	0x6f, 0x64, 0xf0, 0x2f, 0x65, 0x7a, 0x59, 0x43, 0x87, 0x27, 0x2f, 0x26, 0x37, 0x93, 0x27, 0xc6,
	0xa8, 0x0c, 0xfe, 0x39, 0x94, 0x92, 0xe2, 0x32, 0x9f, 0xaa, 0x07, 0xb0, 0x70, 0x62, 0x79, 0x72,
	0x0c, 0xfd, 0x1e, 0x59, 0x3c, 0xb0, 0x4a, 0xe7, 0x16, 0x46, 0xe3, 0x30, 0x7e, 0x98, 0xa0, 0x8c,
	0x8d, 0xc8, 0x1b, 0x6b, 0x29, 0x43, 0xb5, 0x90, 0x79, 0x08, 0xe5, 0xf1, 0xef, 0x12, 0xde, 0x54,
	0xa5, 0x4c, 0x4e, 0x2a, 0x1b, 0x53, 0x9d, 0x8f, 0x99, 0xc1, 0x27, 0xb0, 0x9a, 0x32, 0xa3, 0x61,
	0x73, 0x06, 0x23, 0xa5, 0x97, 0x54, 0xd9, 0x85, 0x60, 0xe9, 0xc1, 0x62, 0xdc, 0x63, 0xe3, 0xca,
	0x74, 0xdb, 0x1b, 0xcc, 0xd6, 0xa4, 0x0e, 0xcb, 0x13, 0x73, 0x06, 0x7e, 0x92, 0xc2, 0xe0, 0x7b,
	0x1a, 0xec, 0x43, 0x3e, 0x6c, 0x27, 0xf0, 0x7a, 0x72, 0xaa, 0x34, 0x18, 0xa9, 0xb2, 0x7f, 0x05,
	0x8b, 0x6a, 0xaf, 0x8c, 0x1f, 0x4f, 0x92, 0x7e, 0x4f, 0xea, 0x31, 0xa0, 0xc9, 0x76, 0x06, 0x3f,
	0x55, 0xb4, 0x4f, 0x6b, 0x75, 0x52, 0x35, 0xf9, 0x08, 0x95, 0x59, 0x5d, 0x07, 0xfe, 0x71, 0x1a,
	0xc3, 0x94, 0xce, 0x24, 0x95, 0xf1, 0x6f, 0x61, 0xf3, 0x5b, 0x4d, 0x05, 0xfe, 0xc9, 0x8c, 0x88,
	0xa7, 0x35, 0x1f, 0xa9, 0x02, 0x7e, 0x07, 0xab, 0x29, 0x1f, 0x72, 0x35, 0x93, 0x66, 0x75, 0x16,
	0x1b, 0xcf, 0xbe, 0x89, 0x13, 0xf6, 0x02, 0x66, 0x06, 0xbf, 0x85, 0x92, 0xf2, 0x35, 0xc4, 0x1b,
	0xa9, 0xcf, 0x32, 0xb3, 0x15, 0x3c, 0x50, 0xdf, 0x34, 0xd4, 0xec, 0x50, 0x5e, 0x7e, 0x37, 0x26,
	0xda, 0x7d, 0x33, 0x83, 0x7f, 0x3a, 0x36, 0x15, 0xdc, 0x9c, 0xae, 0x0a, 0x48, 0x29, 0xd8, 0xe1,
	0x23, 0xef, 0x0c, 0xe2, 0xb5, 0x49, 0xb0, 0x7c, 0x4a, 0xce, 0xe0, 0x1a, 0x60, 0x85, 0x45, 0xf5,
	0xf3, 0x67, 0x9f, 0x5e, 0xce, 0xcd, 0xe4, 0x10, 0x56, 0xd4, 0xfa, 0x7d, 0x2b, 0x45, 0x8e, 0x60,
	0x55, 0xe5, 0x71, 0x4b, 0x4d, 0xde, 0x40, 0xa9, 0xc6, 0x06, 0x03, 0xd6, 0xb7, 0xb9, 0x3d, 0xbf,
	0x0e, 0xaf, 0x01, 0x9a, 0x6e, 0x7f, 0x18, 0x70, 0xff, 0x16, 0xc4, 0x5d, 0x78, 0x90, 0xfe, 0x42,
	0x86, 0x9f, 0xa7, 0xbc, 0x84, 0x4d, 0xbf, 0xa1, 0xa5, 0x25, 0xd4, 0xe7, 0xbc, 0xfc, 0x17, 0x61,
	0xff, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x96, 0xd1, 0xff, 0x54, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EIEIOrpcClient is the client API for EIEIOrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EIEIOrpcClient interface {
	EndUseGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EndUseSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EmitterGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	EmitterSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	Years(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Year, error)
	DefaultSelection(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selection, error)
	Populations(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error)
	Geometry(ctx context.Context, in *GeometryInput, opts ...grpc.CallOption) (*Rectangles, error)
	Concentrations(ctx context.Context, in *ConcentrationInput, opts ...grpc.CallOption) (*Vector, error)
	ConcentrationMatrix(ctx context.Context, in *ConcentrationMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	Emissions(ctx context.Context, in *EmissionsInput, opts ...grpc.CallOption) (*Vector, error)
	EmissionsMatrix(ctx context.Context, in *EmissionsMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	Health(ctx context.Context, in *HealthInput, opts ...grpc.CallOption) (*Vector, error)
	HealthMatrix(ctx context.Context, in *HealthMatrixInput, opts ...grpc.CallOption) (*Matrix, error)
	EvaluationHealth(ctx context.Context, in *EvaluationHealthInput, opts ...grpc.CallOption) (*Vector, error)
	EvaluationConcentrations(ctx context.Context, in *EvaluationConcentrationsInput, opts ...grpc.CallOption) (*Vector, error)
	ConcentrationResponseAverage(ctx context.Context, in *ConcentrationResponseAverageInput, opts ...grpc.CallOption) (*Vector, error)
	PopulationIncidence(ctx context.Context, in *PopulationIncidenceInput, opts ...grpc.CallOption) (*PopulationIncidenceOutput, error)
	FinalDemand(ctx context.Context, in *FinalDemandInput, opts ...grpc.CallOption) (*Vector, error)
	EndUseMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error)
	EmitterMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error)
	EndUseGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EndUseGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EmitterGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	EmitterGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	Commodities(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	Industries(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error)
	DemographicConsumption(ctx context.Context, in *DemographicConsumptionInput, opts ...grpc.CallOption) (*Vector, error)
}

type eIEIOrpcClient struct {
	cc *grpc.ClientConn
}

func NewEIEIOrpcClient(cc *grpc.ClientConn) EIEIOrpcClient {
	return &eIEIOrpcClient{cc}
}

func (c *eIEIOrpcClient) EndUseGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterSectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Years(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Year, error) {
	out := new(Year)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Years", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) DefaultSelection(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selection, error) {
	out := new(Selection)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/DefaultSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Populations(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Populations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error) {
	out := new(ColorInfo)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/MapInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Geometry(ctx context.Context, in *GeometryInput, opts ...grpc.CallOption) (*Rectangles, error) {
	out := new(Rectangles)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Geometry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Concentrations(ctx context.Context, in *ConcentrationInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Concentrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) ConcentrationMatrix(ctx context.Context, in *ConcentrationMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/ConcentrationMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Emissions(ctx context.Context, in *EmissionsInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Emissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmissionsMatrix(ctx context.Context, in *EmissionsMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmissionsMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Health(ctx context.Context, in *HealthInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) HealthMatrix(ctx context.Context, in *HealthMatrixInput, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/HealthMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EvaluationHealth(ctx context.Context, in *EvaluationHealthInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EvaluationHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EvaluationConcentrations(ctx context.Context, in *EvaluationConcentrationsInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EvaluationConcentrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) ConcentrationResponseAverage(ctx context.Context, in *ConcentrationResponseAverageInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/ConcentrationResponseAverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) PopulationIncidence(ctx context.Context, in *PopulationIncidenceInput, opts ...grpc.CallOption) (*PopulationIncidenceOutput, error) {
	out := new(PopulationIncidenceOutput)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/PopulationIncidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) FinalDemand(ctx context.Context, in *FinalDemandInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/FinalDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error) {
	out := new(Mask)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterMask(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*Mask, error) {
	out := new(Mask)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroupNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EndUseGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EndUseGroupAbbrevs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroupNames(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroupNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) EmitterGroupAbbrevs(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/EmitterGroupAbbrevs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Commodities(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Commodities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) Industries(ctx context.Context, in *StringInput, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/Industries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIEIOrpcClient) DemographicConsumption(ctx context.Context, in *DemographicConsumptionInput, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := c.cc.Invoke(ctx, "/eieiorpc.EIEIOrpc/DemographicConsumption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EIEIOrpcServer is the server API for EIEIOrpc service.
type EIEIOrpcServer interface {
	EndUseGroups(context.Context, *Selection) (*Selectors, error)
	EndUseSectors(context.Context, *Selection) (*Selectors, error)
	EmitterGroups(context.Context, *Selection) (*Selectors, error)
	EmitterSectors(context.Context, *Selection) (*Selectors, error)
	Years(context.Context, *Selection) (*Year, error)
	DefaultSelection(context.Context, *Selection) (*Selection, error)
	Populations(context.Context, *Selection) (*Selectors, error)
	MapInfo(context.Context, *Selection) (*ColorInfo, error)
	Geometry(context.Context, *GeometryInput) (*Rectangles, error)
	Concentrations(context.Context, *ConcentrationInput) (*Vector, error)
	ConcentrationMatrix(context.Context, *ConcentrationMatrixInput) (*Matrix, error)
	Emissions(context.Context, *EmissionsInput) (*Vector, error)
	EmissionsMatrix(context.Context, *EmissionsMatrixInput) (*Matrix, error)
	Health(context.Context, *HealthInput) (*Vector, error)
	HealthMatrix(context.Context, *HealthMatrixInput) (*Matrix, error)
	EvaluationHealth(context.Context, *EvaluationHealthInput) (*Vector, error)
	EvaluationConcentrations(context.Context, *EvaluationConcentrationsInput) (*Vector, error)
	ConcentrationResponseAverage(context.Context, *ConcentrationResponseAverageInput) (*Vector, error)
	PopulationIncidence(context.Context, *PopulationIncidenceInput) (*PopulationIncidenceOutput, error)
	FinalDemand(context.Context, *FinalDemandInput) (*Vector, error)
	EndUseMask(context.Context, *StringInput) (*Mask, error)
	EmitterMask(context.Context, *StringInput) (*Mask, error)
	EndUseGroupNames(context.Context, *StringInput) (*StringList, error)
	EndUseGroupAbbrevs(context.Context, *StringInput) (*StringList, error)
	EmitterGroupNames(context.Context, *StringInput) (*StringList, error)
	EmitterGroupAbbrevs(context.Context, *StringInput) (*StringList, error)
	Commodities(context.Context, *StringInput) (*StringList, error)
	Industries(context.Context, *StringInput) (*StringList, error)
	DemographicConsumption(context.Context, *DemographicConsumptionInput) (*Vector, error)
}

// UnimplementedEIEIOrpcServer can be embedded to have forward compatible implementations.
type UnimplementedEIEIOrpcServer struct {
}

func (*UnimplementedEIEIOrpcServer) EndUseGroups(ctx context.Context, req *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroups not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseSectors(ctx context.Context, req *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseSectors not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroups(ctx context.Context, req *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroups not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterSectors(ctx context.Context, req *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterSectors not implemented")
}
func (*UnimplementedEIEIOrpcServer) Years(ctx context.Context, req *Selection) (*Year, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Years not implemented")
}
func (*UnimplementedEIEIOrpcServer) DefaultSelection(ctx context.Context, req *Selection) (*Selection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultSelection not implemented")
}
func (*UnimplementedEIEIOrpcServer) Populations(ctx context.Context, req *Selection) (*Selectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Populations not implemented")
}
func (*UnimplementedEIEIOrpcServer) MapInfo(ctx context.Context, req *Selection) (*ColorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapInfo not implemented")
}
func (*UnimplementedEIEIOrpcServer) Geometry(ctx context.Context, req *GeometryInput) (*Rectangles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geometry not implemented")
}
func (*UnimplementedEIEIOrpcServer) Concentrations(ctx context.Context, req *ConcentrationInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concentrations not implemented")
}
func (*UnimplementedEIEIOrpcServer) ConcentrationMatrix(ctx context.Context, req *ConcentrationMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConcentrationMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) Emissions(ctx context.Context, req *EmissionsInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emissions not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmissionsMatrix(ctx context.Context, req *EmissionsMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmissionsMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) Health(ctx context.Context, req *HealthInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedEIEIOrpcServer) HealthMatrix(ctx context.Context, req *HealthMatrixInput) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthMatrix not implemented")
}
func (*UnimplementedEIEIOrpcServer) EvaluationHealth(ctx context.Context, req *EvaluationHealthInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationHealth not implemented")
}
func (*UnimplementedEIEIOrpcServer) EvaluationConcentrations(ctx context.Context, req *EvaluationConcentrationsInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationConcentrations not implemented")
}
func (*UnimplementedEIEIOrpcServer) ConcentrationResponseAverage(ctx context.Context, req *ConcentrationResponseAverageInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConcentrationResponseAverage not implemented")
}
func (*UnimplementedEIEIOrpcServer) PopulationIncidence(ctx context.Context, req *PopulationIncidenceInput) (*PopulationIncidenceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulationIncidence not implemented")
}
func (*UnimplementedEIEIOrpcServer) FinalDemand(ctx context.Context, req *FinalDemandInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalDemand not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseMask(ctx context.Context, req *StringInput) (*Mask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseMask not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterMask(ctx context.Context, req *StringInput) (*Mask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterMask not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseGroupNames(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroupNames not implemented")
}
func (*UnimplementedEIEIOrpcServer) EndUseGroupAbbrevs(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndUseGroupAbbrevs not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroupNames(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroupNames not implemented")
}
func (*UnimplementedEIEIOrpcServer) EmitterGroupAbbrevs(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitterGroupAbbrevs not implemented")
}
func (*UnimplementedEIEIOrpcServer) Commodities(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commodities not implemented")
}
func (*UnimplementedEIEIOrpcServer) Industries(ctx context.Context, req *StringInput) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Industries not implemented")
}
func (*UnimplementedEIEIOrpcServer) DemographicConsumption(ctx context.Context, req *DemographicConsumptionInput) (*Vector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemographicConsumption not implemented")
}

func RegisterEIEIOrpcServer(s *grpc.Server, srv EIEIOrpcServer) {
	s.RegisterService(&_EIEIOrpc_serviceDesc, srv)
}

func _EIEIOrpc_EndUseGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Years_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Years(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Years",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Years(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_DefaultSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).DefaultSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/DefaultSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).DefaultSelection(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Populations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Populations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Populations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Populations(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_MapInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).MapInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/MapInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).MapInfo(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Geometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeometryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Geometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Geometry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Geometry(ctx, req.(*GeometryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Concentrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Concentrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Concentrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Concentrations(ctx, req.(*ConcentrationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_ConcentrationMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).ConcentrationMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/ConcentrationMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).ConcentrationMatrix(ctx, req.(*ConcentrationMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Emissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Emissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Emissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Emissions(ctx, req.(*EmissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmissionsMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmissionsMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmissionsMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmissionsMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmissionsMatrix(ctx, req.(*EmissionsMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Health(ctx, req.(*HealthInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_HealthMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthMatrixInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).HealthMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/HealthMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).HealthMatrix(ctx, req.(*HealthMatrixInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EvaluationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationHealthInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EvaluationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EvaluationHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EvaluationHealth(ctx, req.(*EvaluationHealthInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EvaluationConcentrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationConcentrationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EvaluationConcentrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EvaluationConcentrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EvaluationConcentrations(ctx, req.(*EvaluationConcentrationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_ConcentrationResponseAverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcentrationResponseAverageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).ConcentrationResponseAverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/ConcentrationResponseAverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).ConcentrationResponseAverage(ctx, req.(*ConcentrationResponseAverageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_PopulationIncidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulationIncidenceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).PopulationIncidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/PopulationIncidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).PopulationIncidence(ctx, req.(*PopulationIncidenceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_FinalDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalDemandInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).FinalDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/FinalDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).FinalDemand(ctx, req.(*FinalDemandInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseMask(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterMask(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroupNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroupNames(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EndUseGroupAbbrevs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EndUseGroupAbbrevs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EndUseGroupAbbrevs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EndUseGroupAbbrevs(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroupNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroupNames(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_EmitterGroupAbbrevs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).EmitterGroupAbbrevs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/EmitterGroupAbbrevs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).EmitterGroupAbbrevs(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Commodities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Commodities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Commodities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Commodities(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_Industries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).Industries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/Industries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).Industries(ctx, req.(*StringInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIEIOrpc_DemographicConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemographicConsumptionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIEIOrpcServer).DemographicConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eieiorpc.EIEIOrpc/DemographicConsumption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIEIOrpcServer).DemographicConsumption(ctx, req.(*DemographicConsumptionInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _EIEIOrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eieiorpc.EIEIOrpc",
	HandlerType: (*EIEIOrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndUseGroups",
			Handler:    _EIEIOrpc_EndUseGroups_Handler,
		},
		{
			MethodName: "EndUseSectors",
			Handler:    _EIEIOrpc_EndUseSectors_Handler,
		},
		{
			MethodName: "EmitterGroups",
			Handler:    _EIEIOrpc_EmitterGroups_Handler,
		},
		{
			MethodName: "EmitterSectors",
			Handler:    _EIEIOrpc_EmitterSectors_Handler,
		},
		{
			MethodName: "Years",
			Handler:    _EIEIOrpc_Years_Handler,
		},
		{
			MethodName: "DefaultSelection",
			Handler:    _EIEIOrpc_DefaultSelection_Handler,
		},
		{
			MethodName: "Populations",
			Handler:    _EIEIOrpc_Populations_Handler,
		},
		{
			MethodName: "MapInfo",
			Handler:    _EIEIOrpc_MapInfo_Handler,
		},
		{
			MethodName: "Geometry",
			Handler:    _EIEIOrpc_Geometry_Handler,
		},
		{
			MethodName: "Concentrations",
			Handler:    _EIEIOrpc_Concentrations_Handler,
		},
		{
			MethodName: "ConcentrationMatrix",
			Handler:    _EIEIOrpc_ConcentrationMatrix_Handler,
		},
		{
			MethodName: "Emissions",
			Handler:    _EIEIOrpc_Emissions_Handler,
		},
		{
			MethodName: "EmissionsMatrix",
			Handler:    _EIEIOrpc_EmissionsMatrix_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EIEIOrpc_Health_Handler,
		},
		{
			MethodName: "HealthMatrix",
			Handler:    _EIEIOrpc_HealthMatrix_Handler,
		},
		{
			MethodName: "EvaluationHealth",
			Handler:    _EIEIOrpc_EvaluationHealth_Handler,
		},
		{
			MethodName: "EvaluationConcentrations",
			Handler:    _EIEIOrpc_EvaluationConcentrations_Handler,
		},
		{
			MethodName: "ConcentrationResponseAverage",
			Handler:    _EIEIOrpc_ConcentrationResponseAverage_Handler,
		},
		{
			MethodName: "PopulationIncidence",
			Handler:    _EIEIOrpc_PopulationIncidence_Handler,
		},
		{
			MethodName: "FinalDemand",
			Handler:    _EIEIOrpc_FinalDemand_Handler,
		},
		{
			MethodName: "EndUseMask",
			Handler:    _EIEIOrpc_EndUseMask_Handler,
		},
		{
			MethodName: "EmitterMask",
			Handler:    _EIEIOrpc_EmitterMask_Handler,
		},
		{
			MethodName: "EndUseGroupNames",
			Handler:    _EIEIOrpc_EndUseGroupNames_Handler,
		},
		{
			MethodName: "EndUseGroupAbbrevs",
			Handler:    _EIEIOrpc_EndUseGroupAbbrevs_Handler,
		},
		{
			MethodName: "EmitterGroupNames",
			Handler:    _EIEIOrpc_EmitterGroupNames_Handler,
		},
		{
			MethodName: "EmitterGroupAbbrevs",
			Handler:    _EIEIOrpc_EmitterGroupAbbrevs_Handler,
		},
		{
			MethodName: "Commodities",
			Handler:    _EIEIOrpc_Commodities_Handler,
		},
		{
			MethodName: "Industries",
			Handler:    _EIEIOrpc_Industries_Handler,
		},
		{
			MethodName: "DemographicConsumption",
			Handler:    _EIEIOrpc_DemographicConsumption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eieio.proto",
}
