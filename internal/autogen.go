/*
Copyright Â© 2013 the InMAP authors.
This file is part of InMAP.

InMAP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

InMAP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with InMAP.  If not, see <http://www.gnu.org/licenses/>.
*/

package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/BurntSushi/toml"
	"github.com/spatialmodel/inmap"
	"github.com/spatialmodel/inmap/inmaputil"
	"github.com/spatialmodel/inmap/science/chem/simplechem"
	"github.com/spf13/cobra/doc"
)

// Set up directory location for configuration files.
func init() {
	os.Setenv("INMAP_ROOT_DIR", ".")
}

func main() {
	cfg := inmaputil.InitializeConfig()

	// Generate documentation for the available commands.
	doc.GenMarkdownTree(cfg.Root, "./docs/cmd/")
	editCobraDoc("./docs/cmd")

	writeOutputOptions()
}

type config struct {
	InMAPData        string
	VariableGridData string
	VarGrid          inmap.VarGridConfig
}

func loadConfig(file string) (*config, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	reader := bufio.NewReader(f)
	bytes, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, fmt.Errorf("problem reading configuration file: %v", err)
	}

	cfg := new(config)
	_, err = toml.Decode(string(bytes), cfg)
	if err != nil {
		return nil, fmt.Errorf(
			"there has been an error parsing the configuration file: %v", err)
	}

	cfg.InMAPData = os.ExpandEnv(cfg.InMAPData)
	cfg.VariableGridData = os.ExpandEnv(cfg.VariableGridData)
	cfg.VarGrid.CensusFile = os.ExpandEnv(cfg.VarGrid.CensusFile)
	cfg.VarGrid.MortalityRateFile = os.ExpandEnv(cfg.VarGrid.MortalityRateFile)

	return cfg, err
}

// writeOutputOptions creates a list of output options in markdown format.
func writeOutputOptions() {

	cfg, err := loadConfig("cmd/inmap/configExample.toml")
	if err != nil {
		log.Fatal(err)
	}

	r, err := os.Open(cfg.VariableGridData)
	if err != nil {
		log.Fatal(err)
	}

	var m simplechem.Mechanism
	d := &inmap.InMAP{
		InitFuncs: []inmap.DomainManipulator{
			inmap.Load(r, &cfg.VarGrid, inmap.NewEmissions(), m),
		},
	}
	if err = d.Init(); err != nil {
		log.Fatal(err)
	}
	names, descriptions, units := d.OutputOptions(m)

	f, err := os.Create("docs/output_options.md")
	if err != nil {
		log.Fatal(err)
	}
	_, err = f.Write(([]byte)(`---
id: output_options
title: Model Variables
sidebar_label: Model Variables
---

# InMAP output options

This is a list of InMAP output options that can be used in the 'OutputVariables'
configuration variable.

This file is automatically generated; do not edit.

`))
	if err != nil {
		log.Fatal(err)
	}

	for i, n := range names {
		s := fmt.Sprintf("* `%s`: %s [%s]\n", n, descriptions[i], units[i])
		_, err = f.Write(([]byte)(s))
		if err != nil {
			log.Fatal(err)
		}
	}
	f.Close()
}

// editCobraDoc edits markdown files generated by cobra so they work
// with docusaurus. It also edits the docusaurus sidebars.json to include
// all the cobra documents
func editCobraDoc(dir string) {

	sidebar := struct {
		Docs struct {
			Use []string `json:"Using InMAP"`
			Cmd []string `json:"Commands"`
			Ref []string `json:"Reference"`
		} `json:"docs"`
	}{}
	sb, err := os.Open("./website/sidebars.json")
	if err != nil {
		log.Fatal(err)
	}
	d := json.NewDecoder(sb)
	if err := d.Decode(&sidebar); err != nil {
		log.Fatal("decoding sidebar: ", err)
	}
	sb.Close()
	sidebar.Docs.Cmd = []string{}

	s := `---
id: %s
title: %s
sidebar_label: %s
---

`
	err = filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		filename := filepath.Base(path)
		name := strings.Replace(filename, ".md", "", -1)
		title := strings.Replace(name, "_", " ", -1)
		head := fmt.Sprintf(s, name, title, title)
		sidebar.Docs.Cmd = append(sidebar.Docs.Cmd, "cmd/"+name)
		r, err := os.Open(path)
		if err != nil {
			return err
		}
		b, err := ioutil.ReadAll(r)
		if err != nil {
			return err
		}
		r.Close()

		bb := bytes.Split(b, []byte("\n"))
		for i := range bb {
			if bytes.Contains(bb[i], []byte(".md)")) && bytes.Contains(bb[i], []byte("* [")) {
				// Remove .md file extensions from links.
				bb[i] = bytes.Replace(bb[i], []byte(".md)"), []byte(")"), -1)
				// Fix links to work correctly on website.
				bb[i] = bytes.Replace(bb[i], []byte("]("), []byte("](./"), -1)
			}
		}
		b = bytes.Join(bb, []byte("\n"))
		b = b[:bytes.LastIndex(b, []byte("\n"))]

		w, err := os.Create(path)
		if err != nil {
			return err
		}
		if _, err = fmt.Fprint(w, head); err != nil {
			return err
		}
		if _, err = w.Write(b); err != nil {
			return err
		}
		w.Close()
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	w, err := os.Create("./website/sidebars.json")
	if err != nil {
		log.Fatal(err)
	}
	e := json.NewEncoder(w)
	e.SetIndent("", "\t")
	if err = e.Encode(sidebar); err != nil {
		log.Fatal(err)
	}
	w.Close()
}
